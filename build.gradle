plugins {
    id "fabric-loom" version "${fabric_loom_version}-SNAPSHOT"
    id "java-library"
    id "idea"
}

group = maven_group
version = mod_version

base { archivesName = "_custom_${archives_base_name}-${minecraft_version}" }

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    loom {
        if (file("src/main/resources/${archives_base_name}.accesswidener").exists()) {
            accessWidenerPath = file("src/main/resources/${archives_base_name}.accesswidener")
        }
        mixin {
            defaultRefmapName.set("${archives_base_name}.refmap.json")
        }
    }
    implementation "org.jetbrains:annotations:latest.release"
}

apply from: "build-mappings.gradle"

if (file("build-dependencies.gradle").exists()) { apply from: "build-dependencies.gradle" }

if (file("src/main/resources/${mod_id}.mixins.json").exists()) { apply from: "build-mixins.gradle" }

if (file("build-runtime.gradle").exists()) { apply from: "build-runtime.gradle" }

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
    it.options.encoding = "UTF-8"
}

processResources {
    def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
    stringProperties.each { key, value -> inputs.property(key, value) }
    filesMatching(['fabric.mod.json', 'pack.mcmeta', 'en_us.json']) {
        filter { line -> line.contains('"$schema":') ? null : line }
        filter { line -> line.startsWith('/*') ? null : line }
        filter { line -> line.trim().isEmpty() ? null : line }
        expand(stringProperties) { escapeBackslash = true }
    }
}

jar {
    preserveFileTimestamps = true
    manifest {
        attributes(
            [
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ]
        )
    }
}

remapJar {
    preserveFileTimestamps = true
    destinationDirectory.set(file("${rootDir}/files"))
}
